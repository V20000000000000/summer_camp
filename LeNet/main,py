import numpy as np  # 矩陣運算
import time as t  # 用於計時
from math import floor, ceil  # floor: 往下取整數, ceil: 往上取整數
np.set_printoptions(threshold=np.inf)  # 設定輸出陣列時不省略元素, inf: 無窮大的浮點數
np.set_printoptions(suppress=True)  # 抑制顯示小數位數
with open("output.txt", "w", encoding="utf-8") as file:
    '''Layer1
    Layer: CNN
    input:32x32x1
    filter:5x5x6

    stride:1
    pad:0
    output:28x28x6
    activation: tanh
    '''
    ### 32x32x1 image input feature map ###
    ifmap = np.random.randint(0, 2, size=(1, 32, 32), dtype=np.int32) # 標準數數 
    print("\n==========input feature map==========\n")
    file.write("\n==========input feature map==========\n")
    file.write(str(ifmap))
    print(ifmap)
    ### 5x5x6 convolution kernel ###
    filter = np.random.rand(6, 1, 5, 5)  # 隨機生成6個5x5的卷積核，(num_filters, in_channels, filter_height, filter_width)
    stride = 1
    pad = 0
    print("\n==========filter==========\n")
    file.write("\n==========filter==========\n")
    file.write(str(filter))
    print(filter)
    ### 28x28x6 output feature maps ###
    ofmap = np.zeros((filter.shape[0], floor((ifmap.shape[1] + 2 * pad - filter.shape[2]) / stride) + 1, floor((ifmap.shape[2] + 2 * pad - filter.shape[3]) / stride) + 1)) #根據卷積計算尺寸

    start = t.time()
    print("\n==========Start Layer 1 CNN computation==========\n")
    file.write("\n==========Start Layer 1 CNN computation==========\n")
    for depth in range(ofmap.shape[0]):  # depth=6,height=28,width=28,channel=1,i=5,j=5
        for height in range(ofmap.shape[1]):
            for width in range(ofmap.shape[2]):
                for channel in range(filter.shape[1]):
                    for i in range(filter.shape[2]):
                        for j in range(filter.shape[3]):
                            ofmap[depth][height][width] += ifmap[channel][i + height * stride][j + width * stride] * filter[depth][channel][i][j]

    #6x28x28 = 6x28x28 + 1x32x32 * 6x1x5x5

    ### activation function ###
    for depth in range(ofmap.shape[0]):
        for height in range(ofmap.shape[1]):
            for width in range(ofmap.shape[2]):
                ofmap[depth][height][width] = 2 / (1 + np.exp(-2 * ofmap[depth][height][width])) - 1
    ifmap = ofmap
    print(ifmap)    
    file.write("\n==========conv after activation==========\n")
    file.write(str(ifmap))

    '''Layer2
    Layer: pooling
    input:28x28x6
    filter:2x2x6
    stride:2
    pad:0
    output:14x14x6
    '''
    ### 2x2x6 ###
    filter = np.ones((6, 1, 2, 2))
    stride = 2
    pad = 0
    ### 14x14x6 ###
    ofmap = np.zeros((filter.shape[0], ceil((ifmap.shape[1] + 2 * pad - filter.shape[2]) / stride) + 1, ceil((ifmap.shape[2] + 2 * pad - filter.shape[3]) / stride) + 1))
    print("\n==========Start Layer 2 pooling computation==========\n")
    file.write("\n==========Start Layer 2 pooling computation==========\n")
    for depth in range(ofmap.shape[0]):  # depth=6,height=14,width=14,channel=1,i=2,j=2
        for height in range(ofmap.shape[1]):
            for width in range(ofmap.shape[2]):
                for channel in range(filter.shape[1]):
                    for i in range(filter.shape[2]):
                        for j in range(filter.shape[3]):
                            ofmap[depth][height][width] += ifmap[channel][i + height * stride][j + width * stride] * filter[depth][channel][i][j]

    # average pooling
    ifmap = ofmap / (filter.shape[2] * filter.shape[3])
    print(ifmap)
    file.write(str(ifmap))

    '''Layer3
    Layer: CNN
    input:14x14x6
    filter:5x5x16

    stride:1
    pad:0
    output:10x10x16
    activation: tanh
    '''
    ### 5x5x16 ###
    filter = np.random.rand(16, 6, 5, 5)
    stride = 1
    pad = 0
    ### 10x10x16 output feature maps ###
    ofmap = np.zeros((filter.shape[0], floor((ifmap.shape[1] + 2 * pad - filter.shape[2]) / stride) + 1, floor((ifmap.shape[2] + 2 * pad - filter.shape[3]) / stride) + 1))
    print("\n==========Start Layer 3 CNN computation==========\n")
    file.write("\n==========Start Layer 3 CNN computation==========\n")
    for depth in range(ofmap.shape[0]):  # depth=16,height=10,width=10,channel=6
        for height in range(ofmap.shape[1]): 
            for width in range(ofmap.shape[2]):
                for channel in range(filter.shape[1]):
                    for i in range(filter.shape[2]):
                        for j in range(filter.shape[3]):
                            ofmap[depth][height][width] += ifmap[channel][height * stride + i][width * stride + j] * filter[depth][channel][i][j]

    #16x10x10 = 16x10x10 + 6x10x10 * 16x6x5x5 

    ### activation function ###
    for depth in range (ofmap.shape[0]):
        for height in range (ofmap.shape[1]):
            for width in range(ofmap.shape[2]):
                ofmap[depth][height][width] = 2 / (1 + np.exp(-2 * ofmap[depth][height][width])) + 1
    ifmap = ofmap

    print(ifmap)
    file.write(str(ifmap))
    '''Layer4
    Layer: pooling
    input:10x10x16
    filter:2x2x6
    stride:2
    pad:0
    output:5x5x16
    '''
    ### 2x2x16 ###
    filter = np.ones((1, 16, 2, 2))
    stride = 2
    pad = 0
    ### 5x5x16 ###
    ofmap = np.zeros((filter.shape[0], ceil((ifmap.shape[1] + 2 * pad - filter.shape[2]) / stride ) + 1, ceil((ifmap.shape[2] + 2 * pad - filter.shape[3]) / stride) + 1))
    print("\n==========Start Layer 4 pooling computation==========\n")
    file.write("\n==========Start Layer 4 pooling computation==========\n")
    for depth in range(ofmap.shape[0]):
        for height in range(ofmap.shape[1]):
            for width in range(ofmap.shape[2]):
                for channel in range(filter.shape[1]):
                    for i in range(filter.shape[2]):
                        for j in range(filter.shape[3]):
                            ofmap[depth][height][width] += ifmap[channel][height * stride + i][width * stride + j] * filter[depth][channel][i][j]
    ifmap = ofmap / (filter.shape[2] * filter.shape[3])
    print(ifmap)
    file.write(str(ifmap))

    '''Layer5
    Layer: C5
    input:5x5x16
    filter:120x5x5x16
    stride:1
    pad:0
    output:5x5x16
    '''
    ### 120x5x5x16 ###
    filter = np.random.rand(120, 1, 5, 5)
    stride = 1
    pad = 0
    ### 5x5x120 output feature maps ###
    ofmap = np.zeros((filter.shape[0], ceil((ifmap.shape[1] + 2 * pad - filter.shape[2]) / stride ) + 1, ceil((ifmap.shape[2] + 2 * pad - filter.shape[3]) / stride) + 1))
    print("\n==========Start Layer 5 C5 computation==========\n")
    file.write("\n==========Start Layer 5 C5 computation==========\n")
    for depth in range(ofmap.shape[0]):  # depth=16,height=10,width=10,channel=6
        for height in range(ofmap.shape[1]): 
            for width in range(ofmap.shape[2]):
                for channel in range(filter.shape[1]):
                    for i in range(filter.shape[2]):
                        for j in range(filter.shape[3]):
                            ofmap[depth][height][width] += ifmap[channel][height * stride + i][width * stride + j] * filter[depth][channel][i][j]

    #120x5x5 = 120x5x5 + 16x5x5 * 120x16x5x5
    print("\n==========after C5==========\n")
    file.write("\n==========after C5==========\n")
    file.write(str(ofmap))
    print(ofmap)
    ifmap = ofmap

    '''Layer6
    Layer: F6
    input:1x1x120
    neurons:84
    activation: tanh
    '''
    ### 1x1x84 ###
    filter = np.random.rand(84)
    ofmap = np.zeros(84)
    print("\n==========Start Layer 6 F6 computation==========\n")
    file.write("\n==========Start Layer 6 F6 computation==========\n")
    for i in range(ofmap.shape[0]):
        for j in range(ifmap.shape[0]):
            ofmap[i] += ifmap[j] * filter[i]
    print(ofmap)
    file.write(str(ofmap))

    ''''
    'Output Layer
    'Layer: Output
    'input:1x1x84
    'neurons:10, gaussian connection
    '''
    ### 1x1x10 ###
    filter = np.random.rand(10) # 隨機生成10個權重
    ofmap = np.zeros(10)
    print("\n\n\n==========Start Output Layer computation==========\n")
    file.write("\n\n\n==========Start Output Layer computation==========\n")
    for i in range(ofmap.shape[0]):
        for j in range(ifmap.shape[0]):
            ofmap[i] += (ifmap[j] * filter[i]).sum()
    print(ofmap)
    file.write(str(ofmap))

    print("\n\n==========End of Computation==========\n")
    file.write("\n\n==========End of Computation==========\n")

    #divide by 100000
    for i in range(ofmap.shape[0]):
        ofmap[i] = ofmap[i] / 100000

    print(ofmap)
    file.write(str(ofmap))


    end = t.time()
    print("\n\n==========Total ExecutionTime==========\n")
    file.write("\n\n==========Total ExecutionTime==========\n")
    print(end - start)
    file.write(str(end - start))
    file.close()
    print("\n\n==========End of Execution==========\n")
    file.write("\n\n==========End of execution==========\n")







